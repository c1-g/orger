#!/usr/bin/env python3
from argparse import ArgumentParser
import logging
from typing import NamedTuple, List, Any, Iterable, Tuple, Optional

from my.hypothesis import get_pages # type: ignore

from kython import group_by_key
from kython import atomic_write
from kython.klogging import setup_logzero
from kython.org_tools import as_org_entry as as_org, link as org_link

from org_utils import OrgTree, pick_heading
# TODO tests for determinism

def get_logger():
    return logging.getLogger('hypothesis-view')

def make_tree(pages) -> OrgTree:
    file_header = f"# AUTOGENERATED BY {__file__}\n" # TODO date?

    all_items = []
    for page in pages:
        page_org = as_org(
            todo=False,
            level=0,
            inline_created=True,
            created=page.dt,
            heading=org_link(title=page.title, url=page.link),
        ).strip()
        hl_orgs = []
        for hl in page.highlights:
            hl_org = as_org(
                todo=False,
                level=0,
                inline_created=True,
                created=hl.dt,
                heading=org_link(title='hyp', url=hl.hyp_link),
                body=hl.content,
            ).strip()
            hl_orgs.append(OrgTree(item=hl_org))
        all_items.append(OrgTree(
            item=page_org,
            children=hl_orgs,
        ))

    return OrgTree(
        item=file_header,
        children=all_items,
    )


def test():
    # TODO FIXME
    pass

def main():
    logger = get_logger()
    setup_logzero(logger, level=logging.DEBUG)

    p = ArgumentParser()
    p.add_argument('--to', default='hypothesis.org')
    args = p.parse_args()

    org_tree = make_tree(get_pages())
    with atomic_write(args.to, 'w', overwrite=True) as fo:
        fo.write(org_tree.render())
    # TODO need to group by source??


if __name__ == '__main__':
    main()
