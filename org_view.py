#!/usr/bin/env python3
from argparse import ArgumentParser
import logging
from tempfile import TemporaryDirectory
from typing import NamedTuple, List, Any, Iterable, Tuple, Optional, Collection
from pathlib import Path

from kython import group_by_key
from kython.ktyping import PathIsh
from kython.klogging import setup_logzero
from kython.kos import atomic_append
from kython.state import JsonState
from kython.org_tools import as_org_entry as as_org, link as org_link

from org_utils import OrgTree, pick_heading

from atomicwrites import atomic_write
# TODO tests for determinism
# TODO unused imports? maybe even ruci?..

"""
TODO
OverWriteView -- basically what we have now
appendview -- also takes json state to track
both need new file header now...
"""

Key = str

# TODO abc???
class OrgView:
    def __init__(
            self,
            logger_tag: str='org-view', # TODO loggerish?
            file_header: str="",
    ) -> None:
        self.logger = logging.getLogger(logger_tag)
        self.file_header = file_header

    def get_items(self) -> Collection[Tuple[Key, OrgTree]]:
        raise NotImplementedError
            # TODO nicer tree generation? yieldy?

    def main_common(self) -> None:
        setup_logzero(self.logger, level=logging.DEBUG)


class OrgViewOverwrite(OrgView):
    def main(self, default_to: PathIsh) -> None:
        self.main_common()

        p = ArgumentParser()
        p.add_argument('--to', type=Path, default=Path(default_to))
        args = p.parse_args()
        self.run(args.to)

    def run(self, to: Path) -> None:
        # TODO make it read only??
        items = [p[1] for p in self.get_items()] # we don't need keys here
        org_tree = OrgTree(
            self.file_header,
            items,
        )
        rtree = org_tree.render()
        with atomic_write(str(to), mode='w', overwrite=True) as fo:
            fo.write(rtree)


class OrgViewAppend(OrgView):
    def main(self) -> None:
        self.main_common()

        p = ArgumentParser()
        p.add_argument('--to', default=self.default_to)
        p.add_argument('--state', type=Path, required=True) # TODO FIXME
        args = p.parse_args()

        state = JsonState(
            path=args.state,
            logger=self.logger,
        )
        items = self.get_items()
        assert len(set(i[0] for i in items)) == len(items), 'duplicate item keys!'

        for key, item in items:
            def action():
                # better to have extra whitespace than rely on trailing
                rendered = '\n' + item.render()
                # TODO FIXME if it doesn't exist, need to create it??
                atomic_append(
                    args.to,
                    rendered,
                )
            # TODO come up with better name?
            state.feed(
                key=key,
                value=item, # TODO not sure about this one... perhaps only link?
                action=action,
            )



def test_org_view_overwrite():
    class TestView(OrgViewOverwrite):
        def __init__(self, items: List[OrgTree]) -> None:
            super().__init__(file_header='# autogenerated!')
            self.items = items

        def get_items(self):
            return self.items

    with TemporaryDirectory() as td:
        rpath = Path(td).joinpath('test.org')
        TestView([]).run(to=rpath)
        assert rpath.read_text() == '# autogenerated!'
